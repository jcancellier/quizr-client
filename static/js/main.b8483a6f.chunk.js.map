{"version":3,"sources":["global/styles/theme.js","pages/Home/style.js","pages/Home/HomePage.js","global/components/AppHeader.js","App.js","helpers/serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","typography","fontFamily","HomePageContainer","styled","div","AuthFormTextContainer","AuthFormContainer","HomePage","state","usernameInputText","handleUsernameInputTextChange","e","setState","target","value","TextField","id","label","this","onChange","variant","Button","color","endIcon","Person","Component","AppHeader","AppBar","position","Toolbar","HeaderText","Typography","AppContainer","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAWeA,EATDC,YAAe,CAC3BC,QAAS,CACPC,KAAM,QAERC,WAAY,CACVC,WAAY,gC,2rBCLT,IAAMC,EAAoBC,IAAOC,IAAV,KAQjBC,EAAwBF,IAAOC,IAAV,KASrBE,EAAoBH,IAAOC,IAAV,KCLxBG,GDYiBJ,IAAOC,IAAV,K,2MCXlBI,MAAQ,CACNC,kBAAmB,I,EAGrBC,8BAAgC,SAACC,GAC/B,EAAKC,SAAS,CAAEH,kBAAmBE,EAAEE,OAAOC,S,wEAGpC,IAAD,OACP,OACE,kBAACZ,EAAD,KACE,kBAACI,EAAD,KACE,kBAACD,EAAD,KACE,kBAACU,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,WACNH,MAAOI,KAAKV,MAAMC,kBAClBU,SAAU,SAAAR,GAAC,OAAI,EAAKD,8BAA8BC,IAClDS,QAAQ,cAaZ,kBAACC,EAAA,EAAD,CACID,QAAQ,YACRE,MAAM,UACNC,QAAU,kBAACC,EAAA,EAAD,OAHd,c,GAhCaC,c,2GCPvB,IAAMC,EAAY,WAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASN,MAAM,WAC9B,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAD,CAAYV,QAAQ,MAApB,SACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAd,kBAOFQ,EAAa3B,YAAO4B,IAAP5B,CAAH,K,oMCXhB,IAAM6B,EAAe7B,IAAOC,IAAV,KAoBH6B,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAetC,MAAOA,GACpB,kBAACuC,EAAA,EAAD,MACA,kBAACH,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8483a6f.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  },\n  typography: {\n    fontFamily: \"'Varela Round', sans-serif\"\n  }\n})\n\nexport default theme;","import styled from 'styled-components';\n\nexport const HomePageContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const AuthFormTextContainer = styled.div`\n  display: flex;\n  padding-bottom: 1rem;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const AuthFormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  /* align-items: center; */\n`;\n\nexport const Divider = styled.div`\n  width: 0.5rem;\n`;","import React, { Component } from 'react';\nimport { \n  TextField, \n  Button, \n  Typography\n} from '@material-ui/core';\nimport { Person } from '@material-ui/icons';\nimport {\n  HomePageContainer,\n  AuthFormTextContainer,\n  AuthFormContainer,\n  Divider\n} from './style';\n\nclass HomePage extends Component {\n  state = {\n    usernameInputText: ''\n  }\n\n  handleUsernameInputTextChange = (e) => {\n    this.setState({ usernameInputText: e.target.value })\n  }\n\n  render() {\n    return (\n      <HomePageContainer>\n        <AuthFormContainer>\n          <AuthFormTextContainer>\n            <TextField\n              id='username-input'\n              label='Username'\n              value={this.state.usernameInputText}\n              onChange={e => this.handleUsernameInputTextChange(e)}\n              variant='outlined'\n            />\n            {/* Use the components below if password will be utilized */}\n            {/* <Divider/>\n            <TextField\n              id='password-input'\n              label='Password'\n              value={this.state.usernameInputText}\n              onChange={e => this.handleUsernameInputTextChange(e)}\n              variant='filled'\n              type=\"password\"\n            /> */}\n          </AuthFormTextContainer>\n          <Button\n              variant='contained'\n              color='primary'\n              endIcon={ <Person /> }\n          >\n            Join\n          </Button>\n        </AuthFormContainer>\n      </HomePageContainer>\n    )\n  }\n}\n\nexport { HomePage };\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\n\nconst AppHeader = () => {\n  return (\n    <AppBar position=\"static\" color='primary'>\n      <Toolbar>\n        <HeaderText variant=\"h4\">Quizr</HeaderText>\n        <Button color=\"inherit\">Create Quiz</Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\n// styles\nconst HeaderText = styled(Typography)`\n  flex: 1;\n`;\n\nexport { AppHeader };","import React from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline } from '@material-ui/core';\nimport theme from './global/styles/theme';\nimport styled from 'styled-components';\nimport { HomePage } from './pages';\nimport { AppHeader } from './global/components';\n\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center;\n  justify-content: center; */\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppContainer>\n        <AppHeader />\n        <HomePage />\n      </AppContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './helpers/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}