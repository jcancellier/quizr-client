{"version":3,"sources":["global/styles/theme.js","pages/Home/style.js","pages/Home/HomePage.js","global/components/AppHeader.js","App.js","helpers/serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","typography","fontFamily","HomePageContainer","styled","div","AuthFormTextContainer","AuthForm","form","minUsernameInputTextLength","HomePage","state","usernameInputText","usernameInputTextDisable","handleUsernameInputTextChange","e","setState","target","value","length","handleSubmitAuthenticationForm","preventDefault","console","log","onSubmit","this","TextField","id","label","onChange","variant","Button","color","endIcon","Person","disabled","onClick","Component","AppHeader","AppBar","position","Toolbar","HeaderText","Typography","AppContainer","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAWeA,EATDC,YAAe,CAC3BC,QAAS,CACPC,KAAM,QAERC,WAAY,CACVC,WAAY,gC,6pBCLT,IAAMC,EAAoBC,IAAOC,IAAV,KAQjBC,EAAwBF,IAAOC,IAAV,KASrBE,EAAWH,IAAOI,KAAV,KCLfC,GDWiBL,IAAOC,IAAV,KCXe,GAE7BK,E,2MACJC,MAAQ,CACNC,kBAAmB,GACnBC,0BAA0B,G,EAG5BC,8BAAgC,SAACC,GAC/B,EAAKC,SAAS,CAAEJ,kBAAmBG,EAAEE,OAAOC,QAAS,WAE/C,EAAKP,MAAMC,kBAAkBO,QAAUV,EACzC,EAAKO,SAAS,CAAEH,0BAA0B,IAE1C,EAAKG,SAAS,CAAEH,0BAA0B,Q,EAIhDO,+BAAiC,SAACL,GAChCA,EAAEM,iBACFC,QAAQC,IAAI,gB,wEAIJ,IAAD,OACP,OACE,kBAACpB,EAAD,KACE,kBAACI,EAAD,CAAUiB,SAAUC,KAAKL,gCACvB,kBAACd,EAAD,KACE,kBAACoB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,WACNV,MAAOO,KAAKd,MAAMC,kBAClBiB,SAAU,SAAAd,GAAC,OAAI,EAAKD,8BAA8BC,IAClDe,QAAQ,cAaZ,kBAACC,EAAA,EAAD,CACID,QAAQ,YACRE,MAAM,UACNC,QAAU,kBAACC,EAAA,EAAD,MACVC,SAAUV,KAAKd,MAAME,yBACrBuB,QAASX,KAAKL,gCALlB,c,GA7CaiB,a,2GCTvB,IAAMC,EAAY,WAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASR,MAAM,WAC9B,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAD,CAAYZ,QAAQ,MAApB,SACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAd,kBAOFU,EAAatC,YAAOuC,IAAPvC,CAAH,K,oMCXhB,IAAMwC,EAAexC,IAAOC,IAAV,KAoBHwC,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAejD,MAAOA,GACpB,kBAACkD,EAAA,EAAD,MACA,kBAACH,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.17f90fad.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark'\r\n  },\r\n  typography: {\r\n    fontFamily: \"'Varela Round', sans-serif\"\r\n  }\r\n})\r\n\r\nexport default theme;","import styled from 'styled-components';\r\n\r\nexport const HomePageContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const AuthFormTextContainer = styled.div`\r\n  display: flex;\r\n  padding-bottom: 1rem;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const AuthForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Divider = styled.div`\r\n  width: 0.5rem;\r\n`;","import React, { Component } from 'react';\r\nimport { \r\n  TextField, \r\n  Button, \r\n  Typography\r\n} from '@material-ui/core';\r\nimport { Person } from '@material-ui/icons';\r\nimport {\r\n  HomePageContainer,\r\n  AuthFormTextContainer,\r\n  AuthForm,\r\n  Divider\r\n} from './style';\r\n\r\nconst minUsernameInputTextLength = 1;\r\n\r\nclass HomePage extends Component {\r\n  state = {\r\n    usernameInputText: '',\r\n    usernameInputTextDisable: true\r\n  }\r\n\r\n  handleUsernameInputTextChange = (e) => {\r\n    this.setState({ usernameInputText: e.target.value }, () => {\r\n      // Validate minimum usernameInputText length\r\n      if (this.state.usernameInputText.length >= minUsernameInputTextLength)\r\n        this.setState({ usernameInputTextDisable: false });\r\n      else \r\n        this.setState({ usernameInputTextDisable: true });\r\n    })\r\n  }\r\n\r\n  handleSubmitAuthenticationForm = (e) => {\r\n    e.preventDefault();\r\n    console.log('hello world')\r\n    // alert('submitted');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <HomePageContainer>\r\n        <AuthForm onSubmit={this.handleSubmitAuthenticationForm}>\r\n          <AuthFormTextContainer>\r\n            <TextField\r\n              id='username-input'\r\n              label='Username'\r\n              value={this.state.usernameInputText}\r\n              onChange={e => this.handleUsernameInputTextChange(e)}\r\n              variant='outlined'\r\n            />\r\n            {/* Use the components below if password will be utilized */}\r\n            {/* <Divider/>\r\n            <TextField\r\n              id='password-input'\r\n              label='Password'\r\n              value={this.state.usernameInputText}\r\n              onChange={e => this.handleUsernameInputTextChange(e)}\r\n              variant='filled'\r\n              type=\"password\"\r\n            /> */}\r\n          </AuthFormTextContainer>\r\n          <Button\r\n              variant='contained'\r\n              color='primary'\r\n              endIcon={ <Person /> }\r\n              disabled={this.state.usernameInputTextDisable}\r\n              onClick={this.handleSubmitAuthenticationForm}\r\n          >\r\n            Join\r\n          </Button>\r\n        </AuthForm>\r\n      </HomePageContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport { HomePage };\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\n\r\nconst AppHeader = () => {\r\n  return (\r\n    <AppBar position=\"static\" color='primary'>\r\n      <Toolbar>\r\n        <HeaderText variant=\"h4\">Quizr</HeaderText>\r\n        <Button color=\"inherit\">Create Quiz</Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\n// styles\r\nconst HeaderText = styled(Typography)`\r\n  flex: 1;\r\n`;\r\n\r\nexport { AppHeader };","import React from 'react';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { CssBaseline } from '@material-ui/core';\r\nimport theme from './global/styles/theme';\r\nimport styled from 'styled-components';\r\nimport { HomePage } from './pages';\r\nimport { AppHeader } from './global/components';\r\n\r\nconst AppContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* align-items: center;\r\n  justify-content: center; */\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <AppContainer>\r\n        <AppHeader />\r\n        <HomePage />\r\n      </AppContainer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './helpers/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}